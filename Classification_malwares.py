import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession

config = ConfigProto()
config.gpu_options.allow_growth = True
session = InteractiveSession(config=config)

from matplotlib import pyplot as plt

import numpy as np
import tensorflow as tf

from nets import inception
from preprocessing import inception_preprocessing

from os.path import getsize

def Cnn_Check(count):
    checkpoints_dir = os.getcwd()

    slim = tf.contrib.slim

    image_size = inception.inception_v1.default_image_size
    with tf.Graph().as_default():
        image_input = tf.read_file('Text\GrayScale\input%s.jpg' % count)
        image = tf.image.decode_jpeg(image_input, channels=3)
        processed_image = inception_preprocessing.preprocess_image(image,
                                                                    image_size,
                                                                    image_size,
                                                                    is_training=False)
        processed_images = tf.expand_dims(processed_image, 0)

        with slim.arg_scope(inception.inception_v1_arg_scope()):
            logits, _=inception.inception_v1(processed_images, num_classes=2, is_training=False)
        probabilities = tf.nn.softmax(logits)

        init_fn = slim.assign_from_checkpoint_fn(
            os.path.join(checkpoints_dir, 'model.ckpt-20000'),
            slim.get_model_variables('InceptionV1'))

        with tf.Session() as sess:
            init_fn(sess)
            np_image, probabilities = sess.run([image, probabilities])
            probabilities = probabilities[0, 0:]
            sorted_inds = [i[0] for i in sorted(enumerate(-probabilities), key=lambda x:x[1])]

        names = os.listdir('Classification')
        for i in range(1):
            index = sorted_inds[i]
            #print('Probability %0.2f%% => [%s]' % (probabilities[index], names[index]))
            if names[index] == "Win64s":
                return "Detected"            
